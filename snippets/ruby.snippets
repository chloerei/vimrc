snippet #!
	#!/usr/bin/env ruby
snippet begin
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet deft
	def test_${1:case_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
snippet w
	attr_writer :${1:attr_names}
snippet rw
	attr_accessor :${1:attr_names}
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet do
	do
		${1}
	end
snippet dov
	do |${1:variable}|
		${2}
	end
snippet ea
	each do |${1:item}|
		${2}
	end
snippet :
	${1:key}: ${2:value}
snippet class
	class ${1:Name}
		${2}
	end
snippet module
	module ${1:Name}
		${2}
	end
# test
snippet test
	test "${1}" do
		${2}
	end
snippet as
	assert ${1:test}, "${2:Failure message.}"${3}
snippet ase
	assert_equal ${1:expected}, ${2:actual}${3}
snippet asne
	assert_not_equal ${1:unexpected}, ${2:actual} ${3}
snippet asid
	assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20} ${4}
snippet asio
	assert_instance_of ${1:ExpectedClass}, ${2:actual_instance} ${3}
snippet asko
	assert_kind_of ${1:ExpectedKind}, ${2:actual_instance} ${3}
snippet asn
	assert_nil ${1:instance} ${2}
snippet asnn
	assert_not_nil ${1:instance} ${2}
snippet asm
	assert_match /${1:expected_pattern}/, ${2:actual_string} ${3}
snippet asnm
	assert_no_match /${1:unexpected_pattern}/, ${2:actual_string} ${3}
snippet aso
	assert_operator ${1:left}, :${2:operator}, ${3:right} ${4}
snippet asr
	assert_raise(${1:Exception}) { ${2} }
snippet asnr
	assert_nothing_raised(${1:Exception}) { ${2} }
snippet asrt
	assert_respond_to ${1:object}, :${2:method} ${3}
snippet ass assert_same ..
	assert_same ${1:expected}, ${2:actual} ${3}
snippet ass assert_send ..
	assert_send [${1:object}, :${2:message}, ${3:args}] ${4}
snippet asns
	assert_not_same ${1:unexpected}, ${2:actual} ${3}
snippet ast
	assert_throws :${1:expected}  { ${2} }
snippet asnt
	assert_nothing_thrown { ${1} }
snippet asre
	assert_response :${1:success}, @response.body${2}
snippet asd
	assert_difference "${1}" do
		${2}
	end
snippet asnd
	assert_no_difference "${1}" do
		${2}
	end

# task
snippet namespace
	namespace :${1:`Filename()`} do
		${2}
	end
snippet task
	desc "${1:Task description\}"
	task :${2:task_name => [:dependent, :tasks]} do
		${3}
	end
